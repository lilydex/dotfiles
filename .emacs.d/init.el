;;; package --- Summary
;;; Commentary:
;;; Code:
(global-set-key (kbd "C-SPC") nil)
(fset 'yes-or-no-p 'y-or-n-p)
(setq inhibit-startup-message t);关闭启动画面
(show-paren-mode t)

(tool-bar-mode nil)
(menu-bar-mode nil)
(scroll-bar-mode nil)
;;(require 'chinese-fonts-setup)
;; Auto generated by chinese-fonts-setup
;; <https://github.com/tumashu/chinese-fonts-setup>
(global-font-lock-mode t);语法高亮

(global-linum-mode 1)
(setq column-number-mode t)
(setq line-number-mode t)
(setq backup-by-copying nil)
(setq c-default-style "linux"
      c-basic-offset 8)

;;Key Set
(global-set-key [(control tab)] 'tabbar-forward-tab)
(global-set-key "\C-xw" 'count-words)
(global-set-key "\C-x\C-a" 'bs-show)
(global-set-key "\M-p" 'bs-cycle-previous)
(global-set-key "\M-n" 'bs-cycle-next)
;(global-set-key [(f9)] 'flycheck-list-errors)
(global-set-key "\C-xp" 'flycheck-next-error)
(global-set-key [f4] 'neotree-toggle)
(global-set-key "\C-cc" 'org-capture)

(load "~/.emacs.d/Renpy.el" nil t)
;(require 'renpy)

(require 'time)
(display-time-mode 1)
;;时间使用24小时制
(setq display-time-24hr-format t)
;;时间显示包括日期和具体时间
(setq display-time-day-and-date t)
;;时间的变化频率，单位多少来着?
(setq display-time-interval 10)

(require 'package) ;; You might already have this line
(add-to-list 'package-archives
  '("melpa" . "https://melpa.org/packages/"))
(when (< emacs-major-version 24)
;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) ;; You might already have this line

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cfs--current-profile "profile1" t)
 '(cfs--profiles-steps (quote (("profile1" . 3))) t)
 '(column-number-mode t)
 '(custom-safe-themes
   (quote
    ("4cf3221feff536e2b3385209e9b9dc4c2e0818a69a1cdb4b522756bcdf4e00a4" "4aee8551b53a43a883cb0b7f3255d6859d766b6c5e14bcb01bed572fcbef4328" default)))
 '(display-time-mode t)
 '(ede-project-directories (quote ("/home/liy/Work/Compiler/pl0")))
 '(package-selected-packages
   (quote
    (auto-complete-clang-async chinese-fonts-setup gnuplot gnuplot-mode magit ecb git color-theme org babel auctex jedi flycheck 2048-game)))
 '(semantic-default-submodes
   (quote
    (global-semantic-decoration-mode global-semantic-highlight-func-mode)))
 '(semantic-idle-scheduler-idle-time 1)
 '(show-paren-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Monaco" :foundry "unknown" :slant normal :weight normal :height 98 :width normal)))))
(require 'chinese-fonts-setup)
;(autoload 'jedi:setup "jedi" nil t)
;(setq jedi:setup-keys t)
(add-hook 'python-mode-hook 'jedi:install-server)
(setq jedi:complete-on-dot t)

;;auto-complete + auto-complete-clang-async
(require 'auto-complete-clang-async)
(defun ac-cc-mode-setup ()
  "Clang."
  (setq ac-clang-complete-executable "~/.emacs.d/clang-complete")
  (setq ac-sources '(ac-source-clang-async))
  (ac-clang-launch-completion-process)
  )
(defun my-ac-config ()
  "Config."
  (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
  (global-auto-complete-mode 1))
(my-ac-config)
(ac-config-default)
;;;

;;flycheck
(global-flycheck-mode)


;(yas-global-mode 1)

;;LATEX
(require 'tex)
(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    (setq TeX-engine 'xetex)))

;;neotree
(require 'neotree)
;;tabbar
(require 'tabbar)
(tabbar-mode 1)

;;Org mode
;(setq org-default-notes-file (concat org-dirextory "/note.org"))
;(define-key global-map "\c-cc" 'org-capure)
(require 'org-indent)
(require 'ox-latex)
(setq org-latex-pdf-process '("latexmk -pdflatex=xelatex -pdf -quiet -gg %f"))
(add-to-list
 'org-latex-classes
 '("ctexart" "\\documentclass[UTF8]{ctexart}
\\usepackage[colorlinks,linkcolor=red,anchorcolor=blue,citecolor=green]{hyperref}
\\usepackage{bookmark}
\\usepackage{listings}
\\usepackage{xcolor}
\\ctexset{section={format=\\raggedright\\Large\\bfseries,}}
[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]"
("\\section{%s}" . "\\section*{%s}")
("\\subsection{%s}" . "\\subsection*{%s}")
("\\subsubsection{%s}" . "\\subsection*{%s}")
("\\paragraph{%s}" . "\\paragraph*{%s}")))
(add-hook 'org-mode-hook
	  (lambda ()
	    (setq truncate-lines nil)))
;;;;Babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (ditaa . t)
   (plantuml . t)
   (python . t)
   (latex . t)
   (gnuplot . t)))

(auto-image-file-mode t)
(setq org-src-fontify-natively t)

(setq org-ditaa-jar-path
      (expand-file-name "~/.emacs.d/scripts/ditaa.jar"))
(setq org-plantuml-jar-path
      (expand-file-name "~/.emacs.d/scripts/plantuml.jar"))

(setq org-capture-templates
      '(("j" "Journal" entry (file+datetree "~/Notes/journal.org")
	 "* %?\nEntered in %U\n   %i\n   %a")
        ("t" "Todo" entry (file+headline "~/Notes/gtd.org" "Tasks")
	 "* TODO %?\n   %i\n   %a")
        ("i" "Idea" entry (file+datetree "~/Notes/idea.org")
	 "* %?\nNew idea in %U\n   %i\n   %a")))
;;CEDET
(require 'cedet)


;;; smart complitions
;(require 'semantic/ia)
;(setq-mode-local c-mode semanticdb-find-default-throttle
;                 '(project unloaded system recursive))
;(setq-mode-local c++-mode semanticdb-find-default-throttle
;                 '(project unloaded system recursive))
;;;; TAGS Menu
(defun my-semantic-hook ()
  (imenu-add-to-menubar "TAGS"))

(add-hook 'semantic-init-hooks 'my-semantic-hook)
;;; Semantic DataBase存储位置
(setq semanticdb-default-save-directory
      (expand-file-name "~/.emacs.d/semanticdb"))
;;;
(semantic-mode)
;;;  缩进或者补齐
;;; hippie-try-expand settings
;(setq hippie-expand-try-functions-list
;      '(
;        yas/hippie-try-expand
;        semantic-ia-complete-symbol
;        try-expand-dabbrev
;        try-expand-dabbrev-visible
;        try-expand-dabbrev-all-buffers
;        try-expand-dabbrev-from-kill
;        try-complete-file-name-partially
;        try-complete-file-name
;        try-expand-all-abbrevs))

(defun indent-or-complete ()
  "Complete if point is at end of a word, otherwise indent line."
  (interactive)
  (if (looking-at "\\>")
      (hippie-expand nil)
    (indent-for-tab-command)
    ))

(defun yyc/indent-key-setup ()
  "Set tab as key for indent-or-complete"
  (local-set-key  [(tab)] 'indent-or-complete)
  )
;;;; C-mode-hooks .
(defun yyc/c-mode-keys ()
  "description"
  ;; Semantic functions.
  (semantic-default-c-setup)
  (local-set-key "\C-cb" 'semantic-mrub-switch-tags)
  (local-set-key "\C-cR" 'semantic-symref)
  (local-set-key "\C-ci" 'semantic-ia-fast-jump)
  (local-set-key "\C-cj" 'semantic-complete-jump)
  (local-set-key "\C-cp" 'semantic-ia-show-summary)
  (local-set-key "\C-cl" 'semantic-ia-show-doc)
  (local-set-key "\C-cr" 'semantic-symref-symbol)
  (local-set-key "\C-c/" 'semantic-ia-complete-symbol)
  )
(add-hook 'c-mode-common-hook 'yyc/c-mode-keys)

;;;Mait
(require 'magit)

;;Project
(require 'ede)
(global-ede-mode t)
(provide 'init)

;;; init.el ends here
(put 'narrow-to-region 'disabled nil)
